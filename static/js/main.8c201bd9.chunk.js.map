{"version":3,"sources":["questions2.js","App.js","serviceWorker.js","index.js"],"names":["trainingQuestions","id","question","options","label","value","validationQuestions","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","isOptionChecked","questionIndex","optionIndex","state","trainingAnswers","onOptionChange","setState","prevState","assign","Array","fill","buildOptions","map","o","i","checked","concat","react_default","a","createElement","className","key","htmlFor","type","required","name","onChange","buildQuestions","questions","q","buildValidationOptions","predictions","Math","round","style","width","buildValidationQuestions","getPredictions","net","run","training","onSubmit","e","preventDefault","trainingData","input","output","trainAsync","then","res","console","log","reset","initialState","validationAnswers","undefined","brain","NeuralNetwork","hiddenLayers","_this$state","Fragment","onClick","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.8c201bd9.chunk.js","sourcesContent":["export const trainingQuestions = [\r\n    {\r\n      id: 'q1',\r\n      question: 'Do you often see the best in things?',\r\n      options: [\r\n        { id: 'q1a', label: 'Always', value: 1.0 },\r\n        { id: 'q1b', label: 'Usually, yeah', value: 0.7 },\r\n        { id: 'q1c', label: 'Not really', value: 0.2 },\r\n        { id: 'q1d', label: 'Never!', value: 0.0 },\r\n      ],\r\n    },\r\n    {\r\n      id: 'q2',\r\n      question: 'Do you feel like most things are your fault?',\r\n      options: [\r\n        { id: 'q2a', label: 'Everything I touch dies', value: 0.0 },\r\n        { id: 'q2b', label: 'Yes', value: 0.1 },\r\n        { id: 'q2c', label: 'Sometimes', value: 0.4 },\r\n        { id: 'q2d', label: 'Rarely', value: 0.8 },\r\n      ],\r\n    },\r\n    {\r\n      id: 'q3',\r\n      question: 'You look wonderful today.',\r\n      options: [\r\n        { id: 'q3a', label: 'Yah that makes my day <3!', value: 0.9 },\r\n        { id: 'q3b', label: 'Thanks!', value: 0.7 },\r\n        { id: 'q3c', label: 'I hate compliments', value: 0.1 },\r\n        { id: 'q3d', label: 'Ok', value: 0.5 },\r\n      ],\r\n    },\r\n    {\r\n      id: 'q4',\r\n      question: 'How do you feel about perfection?',\r\n      options: [\r\n        { id: 'q4a', label: 'Meh', value: 0.5 },\r\n        { id: 'q4b', label: 'Perfection is important to me', value: 0.3 },\r\n        { id: 'q4c', label: 'Everything I do must be perfect', value: 0.2 },\r\n        { id: 'q4d', label: \"I don't mind as long as everyone's happy!\", value: 1.0 },\r\n      ],\r\n    },\r\n    {\r\n      id: 'q5',\r\n      question: 'Imagine you have a absolutely delicious pizza. An obscured wet floor causes you to slip and drop it on the floor.',\r\n      options: [\r\n        { id: 'q5a', label: 'I deserved that.', value: 0.0 },\r\n        { id: 'q5b', label: \"These things happen. I'll get another\", value: 1.0 },\r\n        { id: 'q5c', label: 'Top 5 worst days of my life', value: 0.3 },\r\n        { id: 'q5d', label: 'Rest in Pepperoni, pizza.', value: 0.5 },\r\n      ],\r\n    },\r\n  ];\r\n  \r\n  export const validationQuestions = [\r\n    {\r\n      id: 'vq1',\r\n      question: 'How full is the proverbial glass?',\r\n      options: [\r\n        { id: 'vq1a', label: 'As empty as MY SOUL', value: 0.0 },\r\n        { id: 'vq1b', label: 'Definitely half empty', value: 0.3 },\r\n        { id: 'vq1c', label: 'It\\'s half full', value: 0.6 },\r\n        { id: 'vq1d', label: 'Full to the brim', value: 1.0 },\r\n      ],\r\n    },\r\n    {\r\n        id: 'vq2',\r\n        question: 'Do you have trust and faith in people?',\r\n        options: [\r\n          { id: 'vq2d', label: 'Always', value: 1.0 },\r\n          { id: 'vq2a', label: 'They are only out to destroy me', value: 0.0 },\r\n          { id: 'vq2b', label: 'Rarely', value: 0.2 },\r\n          { id: 'vq2c', label: 'Most of the time', value: 0.8 }\r\n        ],\r\n      },\r\n  ];","import React from 'react';\nimport './App.css';\nimport brain from 'brain.js';\nimport { trainingQuestions, validationQuestions } from './questions2';\n\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.initialState = {\n     trainingAnswers: trainingQuestions.map(()=> Array(4).fill(0)),\n     validationAnswers: validationQuestions.map(()=> Array(4).fill(0)),\n     training: false,\n     predictions: undefined,\n    };\n\n    this.state = this.initialState;\n\n    //initialize the neural network\n    this.net = new brain.NeuralNetwork({ hiddenLayers: [4] });\n  }\n  // update the array with 1 in the selected index\n  isOptionChecked = (questionIndex, optionIndex) => {\n   const { trainingAnswers } = this.state;\n   return trainingAnswers[questionIndex][optionIndex] !== 0;\n  };\n\n  onOptionChange = (questionIndex, optionIndex) => {\n    this.setState((prevState) => {\n      const { trainingAnswers } = Object.assign(prevState, {});\n\n    trainingAnswers[questionIndex] = Array(4).fill(0);\n    trainingAnswers[questionIndex][optionIndex] = 1;\n\n    return { trainingAnswers };\n    });\n  };\n\n  buildOptions = (question, options) => options.map((o, i) => {\n    const { trainingAnswers } = this.state;\n    const checked = trainingAnswers[question][i] !== 0;\n    const id = `q${question}-o${i}`;\n\n    return (\n      <label className=\"option-label\" key={id} htmlFor={id}>\n        <input\n          type=\"radio\"\n          required\n          name={`q${question}`}\n          id={id}\n          checked={checked}\n          onChange={() => this.onOptionChange(question, i)}\n        />\n        <span>{o.label}</span>\n      </label>\n    );\n  });\n\n  buildQuestions = questions => questions.map((q, i) => (\n    <div className=\"question\" key={q.id}>\n      <h4>\n        {`${i + 1}. ${q.question}`}\n      </h4>\n      <div className=\"options\">\n        {this.buildOptions(i, q.options)}\n      </div>\n    </div>\n  ));\n\n  buildValidationOptions = (predictions, options) => options.map((o, i) => {\n    // const prediction = `q${predictions[0][i]}`;\n    return (\n        \n            <span className=\"option-label\" key={o.id}>\n            <span>{`${o.label}: ${Math.round([predictions[0][i]] * 100)}%`}</span>\n            <div className=\"bar\" style={{ width: `${Math.round(predictions[0][i] * 100)}%` }} />\n          </span>      \n        \n    );\n  });\n\n  buildValidationQuestions = (predictions, questions) => questions.map((q, i) => (\n    <div className=\"question\" key={q.id}>\n      <h4>\n        {`${i + 1}. ${q.question}`}\n      </h4>\n      <div className=\"options\">\n        {this.buildValidationOptions(predictions, q.options)}\n      </div>\n    </div>\n  ));\n\n  getPredictions = () => {\n    const predictions = validationQuestions.map(q => (\n      //give predictions for each of the validation questions defined earlier\n      this.net.run(q.options.map(o => o.value))\n    ));\n\n    this.setState({\n      training: false, // done learning\n      predictions,\n    });\n  };\n\n  /*get input data from optimism value of each option and output data from looking in the\n  trainingAnswers array at the same index.\n  */\n  onSubmit = (e) => {\n    e.preventDefault();\n\n    const { trainingAnswers } = this.state;\n\n    const trainingData = trainingQuestions.map((q, i) => ({\n      input: q.options.map(o => o.value),\n      output: trainingAnswers[i],\n    }));\n\n    this.setState({\n      training: true, // inform that the NN is learning\n    });\n    \n    this.net.trainAsync(trainingData)\n      .then((res) => {\n        // log the rror rate and # iterations\n        console.log(res);\n        this.getPredictions();\n      });\n  };\n\n  reset = () => this.setState(this.initialState);\n\n  render() {\n    const { training, predictions } = this.state;\n\n    return (\n      <main className=\"App\">\n        {!predictions && (\n          <>\n            {!training && (\n              <form onSubmit={this.onSubmit}>\n                <h2>Quiz</h2>\n                {this.buildQuestions(trainingQuestions)}\n                <button type=\"submit\">Submit</button>\n              </form>\n            )}\n\n            {training && (\n              <h1 className=\"loading\">Loading...</h1>\n            )}\n          </>\n        )}\n        \n        {predictions && (\n          //present finding to user. the probability is displayed as a bar under each option\n          <div>\n            <h2>The neural network predicts:</h2>\n            {this.buildValidationQuestions(predictions, validationQuestions)}\n            <button type=\"button\" onClick={this.reset}>Back to quiz</button>\n          </div>\n        )} \n      </main>\n    );\n  }\n }\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}